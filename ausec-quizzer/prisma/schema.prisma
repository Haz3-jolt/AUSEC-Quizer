generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

// QuizQuestion Table (unchanged)
model QuizQuestion {
    id                 Int      @id @default(autoincrement())
    question           String
    correctAnswerIndex Int
    options            String[] 
    createdAt          DateTime @default(now()) 
    updatedAt          DateTime @updatedAt 
}

// User Table (unchanged)
model User {
    id                    String               @id @default(cuid())
    email                 String               @unique
    emailVerified         DateTime?
    schoolEmail           String
    score                 Int                  @default(0)
    hasCompletedQuiz      Boolean              @default(false)
    createdAt             DateTime             @default(now())
    updatedAt             DateTime             @updatedAt
    sessions              Session[]
    highScores            HighScore[]          @relation("UserHighScores")
    sessionCounts         UserSessionCount[]   @relation("UserSessionCounts")
    emailLinks            EmailLink[]          @relation("UserEmailLinks")
    emailScores           EmailScore[]         @relation("UserEmailScores")
    suspiciousActivities SuspiciousActivity[] @relation("UserSuspiciousActivities")
}

// Session Table (unchanged)
model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userid       String
    expires      DateTime
    user         User     @relation(fields: [userid], references: [id], onDelete: Cascade)
}

// VerificationToken Table (unchanged)
model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

// New Relations

// HighScore Table (new relation)
model HighScore {
    userid     String   @id
    score      Int
    achievedAt DateTime @default(now()) 
    user       User     @relation("UserHighScores", fields: [userid], references: [id], onDelete: Cascade)
}

// UserSessionCount Table (new relation)
model UserSessionCount {
    userid     String  @id
    sessionCount Int   @default(0)
    user       User    @relation("UserSessionCounts", fields: [userid], references: [id], onDelete: Cascade)
}

// EmailLink Table (new relation)
model EmailLink {
    userid     String   @id
    emailSentAt DateTime @default(now()) 
    user       User     @relation("UserEmailLinks", fields: [userid], references: [id], onDelete: Cascade)
}

// EmailScore Table (new relation)
model EmailScore {
    userid     String   @id
    emailSentAt DateTime @default(now()) 
    user       User     @relation("UserEmailScores", fields: [userid], references: [id], onDelete: Cascade)
}

// SuspiciousActivity Table (new relation)
model SuspiciousActivity {
    userid     String   @id
    flaggedAt  DateTime @default(now()) 
    flaggedByAdmin Boolean @default(true)
    user       User     @relation("UserSuspiciousActivities", fields: [userid], references: [id], onDelete: Cascade)
}
